{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for creating BOSH AWS infrastructure for concourse ci.",
  "Parameters" : {
    "TagName" : {
      "Description" : "All created resources will be tagged with this name",
      "Type" : "String",
      "Default" : "certification",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    }
  },
  "Mappings": {
    "IPConfigurations": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "Public": {
        "CIDR": "10.0.0.0/24",
        "DirectorPrivate": "10.0.0.6",
        "Gateway": "10.0.0.1"
      },
      "Private": {
        "CIDR": "10.0.1.0/24",
        "ReservedRange": "10.0.1.2-10.0.1.9",
        "StaticRange": "10.0.1.10-10.0.1.30",
        "Static1": "10.0.1.29",
        "Static2": "10.0.1.30"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Fn::FindInMap": [ "IPConfigurations", "VPC", "CIDR" ] },
        "Tags": [ {"Key": "Name", "Value": { "Ref" : "TagName" } } ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [ { "Key": "Name", "Value": { "Ref" : "TagName" } } ]
      }
    },
    "AttachGateway": {
      "DependsOn": [ "VPC", "InternetGateway" ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "NetworkAcl": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [ { "Key": "Name", "Value": { "Ref" : "TagName" } } ]
      }
    },
    "InBoundAllTrafficAclEntry": {
      "DependsOn": [ "NetworkAcl" ],
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "OutBoundAllTrafficAclEntry": {
      "DependsOn": [ "NetworkAcl" ],
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "NetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "CISecurityGroup": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "allows local and concourse traffic",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [ { "Key": "Name", "Value": "ci" } ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {
        "AccessControl": "Private",
        "Tags": [ { "Key": "Name", "Value": { "Ref" : "TagName" } } ]
      }
    },
    "DirectorEIP": {
      "DependsOn": [ "AttachGateway" ],
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },
    "DeploymentEIP": {
      "DependsOn": [ "AttachGateway" ],
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },
    "PublicSubnet": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "IPConfigurations", "Public", "CIDR" ] },
        "Tags": [ { "Key": "Name", "Value": {
          "Fn::Join": [ "-", [ "public", { "Ref" : "TagName" } ] ]
        } } ]
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "DependsOn": [ "PublicSubnet", "PublicRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "DependsOn": [ "PublicSubnet", "NetworkAcl" ],
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet" },
        "NetworkAclId": { "Ref": "NetworkAcl" }
      }
    },
    "PublicRouteTable": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [ { "Key": "Name", "Value": {
          "Fn::Join": [ "-", [ "public", { "Ref" : "TagName" } ] ]
        } } ]
      }
    },
    "PublicRoute": {
      "DependsOn": [ "PublicRouteTable", "AttachGateway" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "NAT" : {
      "DependsOn" : "AttachGateway",
      "Type" : "AWS::EC2::NatGateway",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["NATEIP", "AllocationId"]},
        "SubnetId" : { "Ref" : "PublicSubnet" }
      }
    },
    "NATEIP" : {
      "DependsOn": [ "AttachGateway" ],
      "Type" : "AWS::EC2::EIP",
      "Properties" : { "Domain" : "vpc" }
    },
    "PrivateSubnet": {
      "DependsOn": [ "VPC", "PublicSubnet" ],
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : { "Fn::GetAtt": [ "PublicSubnet", "AvailabilityZone" ] },
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Fn::FindInMap": [ "IPConfigurations", "Private", "CIDR" ] },
        "Tags": [ { "Key": "Name", "Value": {
          "Fn::Join": [ "-", [ "private", { "Ref" : "TagName" } ] ]
        } } ]
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "DependsOn": [ "PrivateSubnet", "PrivateRouteTable" ],
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet" },
        "RouteTableId": { "Ref": "PrivateRouteTable" }
      }
    },
    "PrivateSubnetNetworkAclAssociation": {
      "DependsOn": [ "PrivateSubnet", "NetworkAcl" ],
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PrivateSubnet" },
        "NetworkAclId": { "Ref": "NetworkAcl" }
      }
    },
    "PrivateRouteTable": {
      "DependsOn": [ "VPC" ],
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [ { "Key": "Name", "Value": {
          "Fn::Join": ["-", ["private", { "Ref" : "TagName" } ] ]
        } } ]
      }
    },
    "PrivateRoute": {
      "DependsOn": [ "PrivateRouteTable", "NAT" ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": { "Ref": "NAT" }
      }
    }
  },
  "Outputs": {
    "VPCID": { "Value": { "Ref": "VPC"}},
    "SecurityGroupID": { "Value": { "Ref": "CISecurityGroup"}},
    "DirectorEIP": { "Value": { "Ref": "DirectorEIP"}},
    "DirectorStaticIP": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Public", "DirectorPrivate"]}},
    "DeploymentEIP": { "Value": { "Ref": "DeploymentEIP"}},
    "AvailabilityZone": { "Value": { "Fn::GetAtt": [ "PublicSubnet", "AvailabilityZone"]}},
    "PublicSubnetID": { "Value": { "Ref": "PublicSubnet"}},
    "PublicCIDR": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Public", "CIDR"]}},
    "Gateway": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Public", "Gateway"]}},
    "PrivateSubnetID": { "Value": { "Ref": "PrivateSubnet"}},
    "PrivateCIDR": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Private", "CIDR"]}},
    "ReservedRange": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Private", "ReservedRange"]}},
    "StaticRange": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Private", "StaticRange"]}},
    "StaticIP1": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Private", "Static1"]}},
    "StaticIP2": { "Value": { "Fn::FindInMap": [ "IPConfigurations", "Private", "Static2"]}},
    "BlobstoreBucketName": { "Value": { "Ref": "S3Bucket"}}
  }
}
